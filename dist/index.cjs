#!/usr/bin/env node
"use strict";var A=Object.create;var I=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var O=Object.getPrototypeOf,F=Object.prototype.hasOwnProperty;var j=(a,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of q(e))!F.call(a,n)&&n!==t&&I(a,n,{get:()=>e[n],enumerable:!(r=_(e,n))||r.enumerable});return a};var U=(a,e,t)=>(t=a!=null?A(O(a)):{},j(e||!a||!a.__esModule?I(t,"default",{value:a,enumerable:!0}):t,a));var T=require("@modelcontextprotocol/sdk/server/index.js"),D=require("@modelcontextprotocol/sdk/server/stdio.js"),d=require("@modelcontextprotocol/sdk/types.js");var b="0.1.5";var p=require("@modelcontextprotocol/sdk/types.js");var c=require("@modelcontextprotocol/sdk/types.js"),k=U(require("axios"),1),M=require("yanki-connect"),w=class extends Error{constructor(e){super(e),this.name="AnkiConnectionError"}},N=class extends Error{constructor(e){super(e),this.name="AnkiTimeoutError"}},C=class extends Error{constructor(t,r){super(t);this.code=r;this.name="AnkiApiError"}},y=class extends Error{constructor(e){super(e),this.name="PayloadConnectionError"}},h=class extends Error{constructor(t,r){super(t);this.statusCode=r;this.name="PayloadApiError"}},$={ankiConnectUrl:"http://localhost:8765",apiVersion:6,timeout:5e3,retryTimeout:1e4,defaultDeck:"Default"},u=class{constructor(e={}){this.config={...$,...e},this.client=new M.YankiConnect}async executeWithRetry(e,t=1){let r=null;for(let n=0;n<=t;n++)try{return await e()}catch(s){if(r=this.normalizeError(s),n<t){let o=Math.min(1e3*Math.pow(2,n),this.config.retryTimeout);await new Promise(l=>setTimeout(l,o))}}throw r||new w("Unknown error occurred")}normalizeError(e){return e instanceof Error?e.message.includes("ECONNREFUSED")?new w("Anki is not running. Please start Anki and ensure AnkiConnect plugin is enabled."):e.message.includes("timeout")||e.message.includes("ETIMEDOUT")?new N("Connection to Anki timed out. Please check if Anki is responsive."):e.message.includes("collection unavailable")?new C("Anki collection is unavailable. Please close any open dialogs in Anki."):e:new Error(String(e))}wrapError(e){return e instanceof w?new c.McpError(c.ErrorCode.InternalError,e.message):e instanceof N?new c.McpError(c.ErrorCode.InternalError,e.message):e instanceof C?new c.McpError(c.ErrorCode.InternalError,e.message):new c.McpError(c.ErrorCode.InternalError,`Anki error: ${e.message}`)}async checkConnection(){try{return await this.executeWithRetry(()=>this.client.invoke("version")),!0}catch(e){throw this.wrapError(e instanceof Error?e:new Error(String(e)))}}async getDeckNames(){try{return await this.executeWithRetry(()=>this.client.deck.deckNames())}catch(e){throw this.wrapError(e instanceof Error?e:new Error(String(e)))}}async createDeck(e){try{let t=await this.executeWithRetry(()=>this.client.deck.createDeck({deck:e}));return typeof t=="number"?t:0}catch(t){throw this.wrapError(t instanceof Error?t:new Error(String(t)))}}async getModelNames(){try{return await this.executeWithRetry(()=>this.client.model.modelNames())}catch(e){throw this.wrapError(e instanceof Error?e:new Error(String(e)))}}async getModelFieldNames(e){try{return await this.executeWithRetry(()=>this.client.model.modelFieldNames({modelName:e}))}catch(t){throw this.wrapError(t instanceof Error?t:new Error(String(t)))}}async getModelTemplates(e){try{return await this.executeWithRetry(()=>this.client.model.modelTemplates({modelName:e}))}catch(t){throw this.wrapError(t instanceof Error?t:new Error(String(t)))}}async getModelStyling(e){try{return await this.executeWithRetry(()=>this.client.model.modelStyling({modelName:e}))}catch(t){throw this.wrapError(t instanceof Error?t:new Error(String(t)))}}async addNote(e){try{return await this.executeWithRetry(()=>{var t;return this.client.note.addNote({note:{deckName:e.deckName,modelName:e.modelName,fields:e.fields,tags:e.tags||[],options:{allowDuplicate:((t=e.options)==null?void 0:t.allowDuplicate)||!1,duplicateScope:"deck"}}})})}catch(t){throw this.wrapError(t instanceof Error?t:new Error(String(t)))}}async addNotes(e){try{return await this.executeWithRetry(()=>this.client.note.addNotes({notes:e.map(t=>({deckName:t.deckName,modelName:t.modelName,fields:t.fields,tags:t.tags||[],options:{allowDuplicate:!1,duplicateScope:"deck"}}))}))}catch(t){throw this.wrapError(t instanceof Error?t:new Error(String(t)))}}async findNotes(e){try{let t=await this.executeWithRetry(()=>this.client.note.findNotes({query:e}));return Array.isArray(t)?t.filter(r=>typeof r=="number"):[]}catch(t){throw this.wrapError(t instanceof Error?t:new Error(String(t)))}}async notesInfo(e){try{let t=await this.executeWithRetry(()=>this.client.note.notesInfo({notes:e}));return Array.isArray(t)?t:[]}catch(t){throw this.wrapError(t instanceof Error?t:new Error(String(t)))}}async updateNoteFields(e){try{await this.executeWithRetry(()=>this.client.note.updateNoteFields({note:{id:e.id,fields:e.fields}}))}catch(t){throw this.wrapError(t instanceof Error?t:new Error(String(t)))}}async deleteNotes(e){try{await this.executeWithRetry(()=>this.client.note.deleteNotes({notes:e}))}catch(t){throw this.wrapError(t instanceof Error?t:new Error(String(t)))}}async createModel(e){try{let t=e.cardTemplates.map(r=>({name:r.name,Front:r.front,Back:r.back}));await this.executeWithRetry(()=>this.client.model.createModel({modelName:e.modelName,inOrderFields:e.inOrderFields,css:e.css,cardTemplates:t}))}catch(t){throw this.wrapError(t instanceof Error?t:new Error(String(t)))}}},S=class{constructor(){this.httpClient=k.default.create({timeout:1e4,headers:{"Content-Type":"application/json",Accept:"application/json"}})}async createAtom(e,t){var r;try{let n=`${e.replace(/\/$/,"")}/api/atoms`;console.log("Making request to:",n),console.log("Request data:",JSON.stringify(t,null,2));let s=await this.httpClient.post(n,t);console.log("Payload response status:",s.status),console.log("Payload response headers:",s.headers),console.log("Raw response data type:",typeof s.data),console.log("Raw response data:",s.data);let o=s.data;if(typeof o=="string")try{o=JSON.parse(o)}catch(m){throw console.log("Failed to parse response as JSON:",m),new h(`Payload returned non-JSON response: ${o.substring(0,200)}...`,s.status)}console.log("Parsed response data:",JSON.stringify(o,null,2));let l=o.doc||o;if(!l||!l.id)throw new h(`Invalid response from Payload CMS: missing id field. Actual response: ${JSON.stringify(o)}`,s.status);return{id:l.id}}catch(n){if(n instanceof k.AxiosError){if(n.code==="ECONNREFUSED"||n.code==="ENOTFOUND")throw new y(`Cannot connect to Payload CMS at ${e}. Please check the URL and ensure the server is running.`);if(n.response){let s=n.response.status,o=((r=n.response.data)==null?void 0:r.message)||n.message;throw new h(`Payload CMS API error: ${o}`,s)}throw new y(`Network error connecting to Payload CMS: ${n.message}`)}throw n}}async getAtom(e,t){var r;try{let n=`${e.replace(/\/$/,"")}/api/atoms/${t}`,s=await this.httpClient.get(n);if(!s.data)throw new h("Invalid response from Payload CMS: no data",s.status);return s.data}catch(n){if(n instanceof k.AxiosError){if(n.code==="ECONNREFUSED"||n.code==="ENOTFOUND")throw new y(`Cannot connect to Payload CMS at ${e}. Please check the URL and ensure the server is running.`);if(n.response){let s=n.response.status,o=((r=n.response.data)==null?void 0:r.message)||n.message;throw new h(`Payload CMS API error: ${o}`,s)}throw new y(`Network error connecting to Payload CMS: ${n.message}`)}throw n}}wrapError(e){return e instanceof y?new c.McpError(c.ErrorCode.InternalError,e.message):e instanceof h?new c.McpError(c.ErrorCode.InternalError,e.message):new c.McpError(c.ErrorCode.InternalError,`Payload error: ${e.message}`)}};var E=class{constructor(){this.ankiClient=new u,this.modelSchemaCache=new Map,this.allModelSchemasCache=null,this.cacheExpiry=5*60*1e3,this.lastCacheUpdate=0}async listResources(){return await this.ankiClient.checkConnection(),{resources:[{uri:"anki://decks/all",name:"All Decks",description:"List of all available decks in Anki",mimeType:"application/json"}]}}async listResourceTemplates(){return await this.ankiClient.checkConnection(),{resourceTemplates:[{uriTemplate:"anki://note-types/{modelName}",name:"Note Type Schema",description:"Detailed structure information for a specific note type",mimeType:"application/json"},{uriTemplate:"anki://note-types/all",name:"All Note Types",description:"List of all available note types",mimeType:"application/json"},{uriTemplate:"anki://note-types/all-with-schemas",name:"All Note Types with Schemas",description:"Detailed structure information for all note types",mimeType:"application/json"},{uriTemplate:"anki://decks/all",name:"All Decks",description:"Complete list of available decks",mimeType:"application/json"}]}}async readResource(e){if(await this.ankiClient.checkConnection(),e==="anki://decks/all"){let r=await this.ankiClient.getDeckNames();return{contents:[{uri:e,mimeType:"application/json",text:JSON.stringify({decks:r,count:r.length},null,2)}]}}if(e==="anki://note-types/all"){let r=await this.ankiClient.getModelNames();return{contents:[{uri:e,mimeType:"application/json",text:JSON.stringify({noteTypes:r,count:r.length},null,2)}]}}if(e==="anki://note-types/all-with-schemas"){let r=await this.getAllModelSchemas();return{contents:[{uri:e,mimeType:"application/json",text:JSON.stringify({noteTypes:r,count:r.length},null,2)}]}}let t=e.match(/^anki:\/\/note-types\/(.+)$/);if(t){let r=decodeURIComponent(t[1]);try{let n=await this.getModelSchema(r);return{contents:[{uri:e,mimeType:"application/json",text:JSON.stringify({modelName:n.modelName,fields:n.fields,templates:n.templates,css:n.css,createTool:`create_${r.replace(/\s+/g,"_")}_note`},null,2)}]}}catch{throw new p.McpError(p.ErrorCode.InvalidParams,`Note type '${r}' does not exist`)}}throw new p.McpError(p.ErrorCode.InvalidParams,`Unknown resource: ${e}`)}async getModelSchema(e){if(!e)throw new p.McpError(p.ErrorCode.InvalidParams,"Model name is required");let t=Date.now(),r=this.modelSchemaCache.get(e);if(r&&t-this.lastCacheUpdate<this.cacheExpiry)return r;if(!(await this.ankiClient.getModelNames()).includes(e))throw new p.McpError(p.ErrorCode.InvalidParams,`Note type not found: ${e}`);let[s,o,l]=await Promise.all([this.ankiClient.getModelFieldNames(e),this.ankiClient.getModelTemplates(e),this.ankiClient.getModelStyling(e)]),m={modelName:e,fields:s,templates:o,css:l.css};return this.modelSchemaCache.set(e,m),this.lastCacheUpdate=t,m}async getAllModelSchemas(){let e=Date.now();if(this.allModelSchemasCache&&e-this.lastCacheUpdate<this.cacheExpiry)return this.allModelSchemasCache;let t=await this.ankiClient.getModelNames(),r=await Promise.all(t.map(n=>this.getModelSchema(n)));return this.allModelSchemasCache=r,this.lastCacheUpdate=e,r}clearCache(){this.modelSchemaCache.clear(),this.allModelSchemasCache=null,this.lastCacheUpdate=0}};var i=require("@modelcontextprotocol/sdk/types.js");var x=class{constructor(){this.ankiClient=new u,this.payloadClient=new S}async getToolSchema(){return{tools:[{name:"list_decks",description:"List all available Anki decks",inputSchema:{type:"object",properties:{},required:[]}},{name:"create_deck",description:"Create a new Anki deck",inputSchema:{type:"object",properties:{name:{type:"string",description:"Name of the deck to create"}},required:["name"]}},{name:"get_note_type_info",description:"Get detailed structure of a note type",inputSchema:{type:"object",properties:{modelName:{type:"string",description:"Name of the note type/model"},includeCss:{type:"boolean",description:"Whether to include CSS information"}},required:["modelName"]}},{name:"create_note",description:"Create a new note (LLM Should call get_note_type_info first)",inputSchema:{type:"object",properties:{type:{type:"string",description:"Note type"},deck:{type:"string",description:"Deck name"},fields:{type:"object",description:"Custom fields for the note(get note type info first)",additionalProperties:!0},allowDuplicate:{type:"boolean",description:"Whether to allow duplicate notes"},tags:{type:"array",items:{type:"string"},description:"Tags for the note"}},required:["type","deck","fields"]}},{name:"batch_create_notes",description:"Create multiple notes at once (llm should call get_note_type_info first )",inputSchema:{type:"object",properties:{notes:{type:"array",items:{type:"object",properties:{type:{type:"string",enum:["Basic","Cloze"]},deck:{type:"string"},fields:{type:"object",additionalProperties:!0},tags:{type:"array",items:{type:"string"}}},required:["type","deck","fields"]}},allowDuplicate:{type:"boolean",description:"Whether to allow duplicate notes"},stopOnError:{type:"boolean",description:"Whether to stop on first error"}},required:["notes"]}},{name:"search_notes",description:"Search for notes using Anki query syntax",inputSchema:{type:"object",properties:{query:{type:"string",description:"Anki search query"}},required:["query"]}},{name:"get_note_info",description:"Get detailed information about a note",inputSchema:{type:"object",properties:{noteId:{type:"number",description:"Note ID"}},required:["noteId"]}},{name:"update_note",description:"Update an existing note",inputSchema:{type:"object",properties:{id:{type:"number",description:"Note ID"},fields:{type:"object",description:"Fields to update"},tags:{type:"array",items:{type:"string"},description:"New tags for the note"}},required:["id","fields"]}},{name:"delete_note",description:"Delete a note",inputSchema:{type:"object",properties:{noteId:{type:"number",description:"Note ID to delete"}},required:["noteId"]}},{name:"list_note_types",description:"List all available note types",inputSchema:{type:"object",properties:{},required:[]}},{name:"create_note_type",description:"Create a new note type",inputSchema:{type:"object",properties:{name:{type:"string",description:"Name of the new note type"},fields:{type:"array",items:{type:"string"},description:"Field names for the note type"},css:{type:"string",description:"CSS styling for the note type"},templates:{type:"array",items:{type:"object",properties:{name:{type:"string"},front:{type:"string"},back:{type:"string"}},required:["name","front","back"]},description:"Card templates"}},required:["name","fields","templates"]}},{name:"create_atom",description:"Create a new atom document in Payload CMS",inputSchema:{type:"object",properties:{payloadUrl:{type:"string",description:"Base URL of the Payload CMS instance (defaults to http://localhost:3000)"},atomData:{type:"object",description:"Data for the atom document",additionalProperties:!0}},required:["atomData"]}},{name:"get_atom",description:"Get an atom document from Payload CMS by ID",inputSchema:{type:"object",properties:{payloadUrl:{type:"string",description:"Base URL of the Payload CMS instance (defaults to http://localhost:3000)"},atomId:{type:"string",description:"ID of the atom document to retrieve"}},required:["atomId"]}}]}}async createAtom(e){if(!e.atomData||typeof e.atomData!="object")throw new i.McpError(i.ErrorCode.InvalidParams,"Atom data is required");let t=e.payloadUrl||"http://localhost:3000";try{let r=await this.payloadClient.createAtom(t,e.atomData);return{content:[{type:"text",text:JSON.stringify({success:!0,message:"Atom successfully created",atomId:r.id,payloadUrl:t,atomData:e.atomData},null,2)}]}}catch(r){throw this.payloadClient.wrapError(r instanceof Error?r:new Error(String(r)))}}async getAtom(e){if(!e.atomId)throw new i.McpError(i.ErrorCode.InvalidParams,"Atom ID is required");let t=e.payloadUrl||"http://localhost:3000";try{let r=await this.payloadClient.getAtom(t,e.atomId);return{content:[{type:"text",text:JSON.stringify(r,null,2)}]}}catch(r){throw this.payloadClient.wrapError(r instanceof Error?r:new Error(String(r)))}}async executeTool(e,t){["create_atom","get_atom"].includes(e)||await this.ankiClient.checkConnection();try{switch(e){case"list_decks":return this.listDecks();case"create_deck":return this.createDeck(t);case"list_note_types":return this.listNoteTypes();case"create_note_type":return this.createNoteType(t);case"get_note_type_info":return this.getNoteTypeInfo(t);case"create_note":return this.createNote(t);case"batch_create_notes":return this.batchCreateNotes(t);case"search_notes":return this.searchNotes(t);case"get_note_info":return this.getNoteInfo(t);case"update_note":return this.updateNote(t);case"delete_note":return this.deleteNote(t);case"create_atom":return this.createAtom(t);case"get_atom":return this.getAtom(t);default:let n=e.match(/^create_(.+)_note$/);if(n){let s=n[1].replace(/_/g," ");return this.createModelSpecificNote(s,t)}throw new i.McpError(i.ErrorCode.MethodNotFound,`Unknown tool: ${e}`)}}catch(n){if(n instanceof i.McpError)throw n;return{content:[{type:"text",text:`Error: ${n instanceof Error?n.message:String(n)}`}],isError:!0}}}async listDecks(){let e=await this.ankiClient.getDeckNames();return{content:[{type:"text",text:JSON.stringify({decks:e,count:e.length},null,2)}]}}async createDeck(e){if(!e.name)throw new i.McpError(i.ErrorCode.InvalidParams,"Deck name is required");let t=await this.ankiClient.createDeck(e.name);return{content:[{type:"text",text:JSON.stringify({deckId:t,name:e.name},null,2)}]}}async listNoteTypes(){let e=await this.ankiClient.getModelNames();return{content:[{type:"text",text:JSON.stringify({noteTypes:e,count:e.length},null,2)}]}}async createNoteType(e){if(!e.name)throw new i.McpError(i.ErrorCode.InvalidParams,"Note type name is required");if(!e.fields||e.fields.length===0)throw new i.McpError(i.ErrorCode.InvalidParams,"Fields are required");if(!e.templates||e.templates.length===0)throw new i.McpError(i.ErrorCode.InvalidParams,"Templates are required");if((await this.ankiClient.getModelNames()).includes(e.name))throw new i.McpError(i.ErrorCode.InvalidParams,`Note type already exists: ${e.name}`);return await this.ankiClient.createModel({modelName:e.name,inOrderFields:e.fields,css:e.css||"",cardTemplates:e.templates}),{content:[{type:"text",text:JSON.stringify({success:!0,modelName:e.name,fields:e.fields,templates:e.templates.length},null,2)}]}}async getNoteTypeInfo(e){if(!e.modelName)throw new i.McpError(i.ErrorCode.InvalidParams,"Model name is required");if(!(await this.ankiClient.getModelNames()).includes(e.modelName))throw new i.McpError(i.ErrorCode.InvalidParams,`Note type not found: ${e.modelName}`);let[r,n]=await Promise.all([this.ankiClient.getModelFieldNames(e.modelName),this.ankiClient.getModelTemplates(e.modelName)]),s={modelName:e.modelName,fields:r,templates:n};if(e.includeCss){let o=await this.ankiClient.getModelStyling(e.modelName);s.css=o.css}return{content:[{type:"text",text:JSON.stringify(s,null,2)}]}}async createNote(e){if(!e.type)throw new i.McpError(i.ErrorCode.InvalidParams,"Note type is required");if(!e.deck)throw new i.McpError(i.ErrorCode.InvalidParams,"Deck name is required");if(!e.fields||Object.keys(e.fields).length===0)throw new i.McpError(i.ErrorCode.InvalidParams,"Fields are required");if((await this.ankiClient.getDeckNames()).includes(e.deck)||await this.ankiClient.createDeck(e.deck),!(await this.ankiClient.getModelNames()).includes(e.type))throw new i.McpError(i.ErrorCode.InvalidParams,`Note type not found: ${e.type}`);let n=await this.ankiClient.getModelFieldNames(e.type),s={};for(let l of n)s[l]=e.fields[l]||e.fields[l.toLowerCase()]||"";let o=await this.ankiClient.addNote({deckName:e.deck,modelName:e.type,fields:s,tags:e.tags||[],options:{allowDuplicate:e.allowDuplicate||!1}});return{content:[{type:"text",text:JSON.stringify({noteId:o,deck:e.deck,modelName:e.type},null,2)}]}}async createModelSpecificNote(e,t){if(!t.deck)throw new i.McpError(i.ErrorCode.InvalidParams,"Deck name is required");if(!(await this.ankiClient.getModelNames()).includes(e))throw new i.McpError(i.ErrorCode.InvalidParams,`Note type not found: ${e}`);(await this.ankiClient.getDeckNames()).includes(t.deck)||await this.ankiClient.createDeck(t.deck);let s=await this.ankiClient.getModelFieldNames(e),o={};for(let g of s)o[g]=t[g.toLowerCase()]||t[g]||"";let l=Array.isArray(t.tags)?t.tags:[],m=await this.ankiClient.addNote({deckName:t.deck,modelName:e,fields:o,tags:l});return{content:[{type:"text",text:JSON.stringify({noteId:m,deck:t.deck,modelName:e},null,2)}]}}async batchCreateNotes(e){if(!e.notes||!Array.isArray(e.notes)||e.notes.length===0)throw new i.McpError(i.ErrorCode.InvalidParams,"Notes array is required");let t=[],r=e.stopOnError!==!1;for(let n=0;n<e.notes.length;n++){let s=e.notes[n];try{if((await this.ankiClient.getDeckNames()).includes(s.deck)||await this.ankiClient.createDeck(s.deck),!(await this.ankiClient.getModelNames()).includes(s.type))throw new Error(`Note type not found: ${s.type}`);let m=await this.ankiClient.getModelFieldNames(s.type),g={};for(let P of m)g[P]=s.fields[P]||s.fields[P.toLowerCase()]||"";let R=await this.ankiClient.addNote({deckName:s.deck,modelName:s.type,fields:g,tags:s.tags||[],options:{allowDuplicate:e.allowDuplicate||!1}});t.push({success:!0,noteId:R,index:n})}catch(o){if(t.push({success:!1,error:o instanceof Error?o.message:String(o),index:n}),r)break}}return{content:[{type:"text",text:JSON.stringify({results:t,total:e.notes.length,successful:t.filter(n=>n.success).length,failed:t.filter(n=>!n.success).length},null,2)}]}}async searchNotes(e){if(!e.query)throw new i.McpError(i.ErrorCode.InvalidParams,"Search query is required");let t=await this.ankiClient.findNotes(e.query),r=[];if(t.length>0){let n=Math.min(t.length,50);r=await this.ankiClient.notesInfo(t.slice(0,n))}return{content:[{type:"text",text:JSON.stringify({query:e.query,total:t.length,notes:r,limitApplied:t.length>50},null,2)}]}}async getNoteInfo(e){if(!e.noteId)throw new i.McpError(i.ErrorCode.InvalidParams,"Note ID is required");let t=await this.ankiClient.notesInfo([e.noteId]);if(!t||t.length===0)throw new i.McpError(i.ErrorCode.InvalidParams,`Note not found: ${e.noteId}`);return{content:[{type:"text",text:JSON.stringify(t[0],null,2)}]}}async updateNote(e){if(!e.id)throw new i.McpError(i.ErrorCode.InvalidParams,"Note ID is required");if(!e.fields||Object.keys(e.fields).length===0)throw new i.McpError(i.ErrorCode.InvalidParams,"Fields are required");let t=await this.ankiClient.notesInfo([e.id]);if(!t||t.length===0)throw new i.McpError(i.ErrorCode.InvalidParams,`Note not found: ${e.id}`);return await this.ankiClient.updateNoteFields({id:e.id,fields:e.fields}),{content:[{type:"text",text:JSON.stringify({success:!0,noteId:e.id},null,2)}]}}async deleteNote(e){if(!e.noteId)throw new i.McpError(i.ErrorCode.InvalidParams,"Note ID is required");return await this.ankiClient.deleteNotes([e.noteId]),{content:[{type:"text",text:JSON.stringify({success:!0,noteId:e.noteId},null,2)}]}}};var v=class{constructor(){this.server=new T.Server({name:"anki-connect-server",version:b},{capabilities:{tools:{},resources:{}}}),this.ankiClient=new u,this.resourceHandler=new E,this.toolHandler=new x,this.setupHandlers(),this.server.onerror=e=>console.error("[MCP Error]",e),process.on("SIGINT",async()=>{await this.server.close(),process.exit(0)})}setupHandlers(){this.server.setRequestHandler(d.ListResourcesRequestSchema,async()=>(await this.checkConnection(),this.resourceHandler.listResources())),this.server.setRequestHandler(d.ListResourceTemplatesRequestSchema,async()=>(await this.checkConnection(),this.resourceHandler.listResourceTemplates())),this.server.setRequestHandler(d.ReadResourceRequestSchema,async e=>(await this.checkConnection(),this.resourceHandler.readResource(e.params.uri))),this.server.setRequestHandler(d.ListToolsRequestSchema,async()=>(await this.checkConnection(),this.toolHandler.getToolSchema())),this.server.setRequestHandler(d.CallToolRequestSchema,async e=>(await this.checkConnection(),this.toolHandler.executeTool(e.params.name,e.params.arguments)))}async checkConnection(){try{await this.ankiClient.checkConnection()}catch{throw new d.McpError(d.ErrorCode.InternalError,"Failed to connect to Anki. Please make sure Anki is running and the AnkiConnect plugin is enabled.")}}async run(){let e=new D.StdioServerTransport;await this.server.connect(e),console.error("Anki MCP server running on stdio")}};async function J(){try{await new v().run()}catch(a){console.error("Failed to start Anki MCP Server:",a),process.exit(1)}}J().catch(console.error);
